import { Box, Button, Loader, TextInput } from "@mantine/core";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import Grid from "~/components/ImagesGrid";
import Layout from "~/components/Layout";
import { api } from "~/utils/api";

export default function Home() {
  const [prompt, setPrompt] = useState("");
  const [negativePrompt, setNegativePrompt] = useState("");

  const utils = api.useContext();

  const postImage = api.example.postImage.useMutation({
    onSuccess: () => {
      utils.example.getImages.invalidate();
    },
  });

  const handleSubmit = (e: any) => {
    e.preventDefault();
    postImage.mutate({ prompt, negativePrompt });
    setPrompt("");
    setNegativePrompt("");
  };

  return (
    <>
      <Head>
        <title>URPM</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box component="main">
        <Layout>
          <Box
            component="form"
            onSubmit={handleSubmit}
            sx={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              flexDirection: "column",
              gap: "0.5rem",
              marginBottom: "1rem",
            }}
          >
            <Box sx={{ width: "60%", alignItems: "center" }}>
              <TextInput
                label="Prompt"
                required
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
              />
              <TextInput
                label="Negative Prompt"
                value={negativePrompt}
                onChange={(e) => setNegativePrompt(e.target.value)}
              />
            </Box>
            <Button type="submit" disabled={postImage.isLoading}>
              {postImage.isLoading ? (
                <Box
                  sx={{ display: "flex", alignItems: "center", gap: "0.25rem" }}
                >
                  <Loader size={"sm"} /> Carregando
                </Box>
              ) : (
                "Submit"
              )}
            </Button>
          </Box>
          <Grid />
        </Layout>
      </Box>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  return (
    <div>
      <p>{sessionData && <span>Logged in as {sessionData.user?.name}</span>}</p>
      <button
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
